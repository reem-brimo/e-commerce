using E_Commerce.Services.Interfaces;
using Stripe;

namespace E_Commerce.Infrastructure.Services
{
    public class StripePaymentService : IPaymentService
    {
        private readonly string _stripeSecretKey;
        private ChargeService _chargeService;

        public StripePaymentService(string stripeSecretKey)
        {
            _stripeSecretKey = stripeSecretKey;
            StripeConfiguration.ApiKey = _stripeSecretKey;
            _chargeService = new ChargeService();

        }

        // Method to set the ChargeService (for testing)
        public void SetChargeService(ChargeService chargeService)
        {
            _chargeService = chargeService;
        }

        public async Task<PaymentResult> ProcessPaymentAsync(decimal amount, string currency, string description, string customerEmail, string token)
        {
            try
            {
                var options = new ChargeCreateOptions
                {
                    Amount = (long)(amount * 100), // Stripe uses smallest currency unit (e.g., cents)
                    Currency = currency,
                    Description = description,
                    Source = token, // Token generated by Stripe.js on the client side
                    ReceiptEmail = customerEmail
                };

                var service = new ChargeService();
                var charge = await service.CreateAsync(options);

                return new PaymentResult
                {
                    Success = charge.Paid,
                    TransactionId = charge.Id,
                    ErrorMessage = charge.FailureMessage
                };
            }
            catch (StripeException ex)
            {
                return new PaymentResult
                {
                    Success = false,
                    ErrorMessage = ex.Message
                };
            }
        }
    }
}
